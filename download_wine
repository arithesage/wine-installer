#!/bin/bash

function abort
{
    REASON=$1

    if [ "$REASON" == "" ];
    then
        echo $REASON
    fi

    echo ""
    
    exit 1
}


function usage
{
    echo "Usage: download-wine <branch> <version> [i386|amd64|both] [out dir]"
    echo ""
    echo "Branch is one of these: stable, devel or staging."
    echo ""
    echo "If no architecture is specified, host's one will be used."
    echo ""
    echo "Also, if host architecture is amd64, the packages for both"
    echo "architectures will be downloaded."
    echo ""
    echo "Packages will be downloaded by default in"
    echo "/var/tmp/wine-pkgs/{version} but you can specify"
    echo "a custom path in 'out dir'."
    echo ""
    echo "WARNING! You can download Wine without admin privileges, BUT,"
    echo "you need them for updating APT database and GPG key installing."
    echo ""
}


if [ "$1" == "" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ];
then
    usage
    abort
fi




SCRIPT_DIR=$(realpath $(dirname $0))

export PATH=$PATH:$SCRIPT_DIR:$SCRIPT_DIR/aux


WINE_BRANCH=$1
WINE_VERSION=$2
ARCH=$3
DOWNLOAD_DIR=$4
DISTRO_VERSION_NAME=$(os_version_name)

INSTALL_PATH="/opt/wine-setup"


if ! [ -d "$INSTALL_PATH" ];
then
    sudo mkdir -p "$INSTALL_PATH"
fi


sudo cp "$SCRIPT_DIR/download_wine" "$INSTALL_PATH/"
sudo cp "$SCRIPT_DIR/download_winetricks" "$INSTALL_PATH/"
sudo cp "$SCRIPT_DIR/extract_iso" "$INSTALL_PATH/"
sudo cp "$SCRIPT_DIR/clean_iso" "$INSTALL_PATH/"
sudo cp "$SCRIPT_DIR/use_wine" "$INSTALL_PATH/"
sudo cp "$SCRIPT_DIR/exec_type" "$INSTALL_PATH/"

sudo cp -r "$SCRIPT_DIR/winecmds" "$INSTALL_PATH/"

sudo ln -sf "$INSTALL_PATH/download_wine" /usr/local/bin/download_wine
sudo ln -sf "$INSTALL_PATH/download_winetricks" /usr/local/bin/download_winetricks
sudo ln -sf "$INSTALL_PATH/extract_iso" /usr/local/bin/extract_iso
sudo ln -sf "$INSTALL_PATH/clean_iso" /usr/local/bin/clean_iso
sudo ln -sf "$INSTALL_PATH/use_wine" /usr/local/bin/use_wine
sudo ln -sf "$INSTALL_PATH/exec_type" /usr/local/bin/exec_type

sudo ln -sf "$INSTALL_PATH/winecmds/win_prepare" /usr/local/bin/win_prepare
sudo ln -sf "$INSTALL_PATH/winecmds/wincd_eject" /usr/local/bin/wincd_eject
sudo ln -sf "$INSTALL_PATH/winecmds/wincd_load" /usr/local/bin/wincd_load
sudo ln -sf "$INSTALL_PATH/winecmds/win_help" /usr/local/bin/win_help


source "$SCRIPT_DIR/aux/check_site"

if ! [ "$WINE_URL_OK" == "1" ];
then
    abort "Can't download Wine."
fi


if ! [ "$WINE_BRANCH" == "stable" ] && ! [ "$WINE_BRANCH" == "devel" ] && \
   ! [ "$WINE_BRANCH" == "staging" ];
then
    abort "Wrong branch name: '$WINE_BRANCH'."
fi


source "$SCRIPT_DIR/aux/packages_arch" --quiet


if [ "$ARCH" == "" ];
then
    echo "No architecture provided. Using host one (${MACHINE_ARCH})."

    if [ "$PACKAGES_ARCH" == "amd64" ];
    then
        ARCH="both"
    fi
fi


if ! [ "$ARCH" == "i386" ] && ! [ "$ARCH" == "amd64" ] && \
   ! [ "$ARCH" == "both" ];
then
    echo "Invalid architecture value '${ARCH}'."
    abort "Only i386, amd64 or both are valid."
fi


if [[ $PACKAGES_ARCH == arm* ]] || [ "$PACKAGES_ARCH" == "amd64" ];
then
    if [ "$ARCH" == "i386" ] || [ "$ARCH" == "both" ];
    then
        sudo dpkg --add-architecture i386
        echo "Added i386 architecture to dpkg if wasn't available yet."
        echo ""
    fi

    if [ "$ARCH" == "amd64" ] || [ "$ARCH" == "both" ] && \
     ! [ "$PACKAGES_ARCH" == "amd64" ];
    then
        sudo dpkg --add-architecture amd64
        echo "Added amd64 architecture to dpkg if wasn't available yet."
        echo ""
    fi
fi


if [ "$WINE_VERSION" == "" ];
then
    echo "You must specify a version to download."
    abort "Check available ones in ${DEBIAN_BUILDS_URL}/main/binary-${ARCH}."
fi



source "$SCRIPT_DIR/aux/get_wine_urls" $WINE_BRANCH $DISTRO_VERSION_NAME --quiet


if ! [ "$DOWNLOAD_DIR" == "" ];
then
    WINE_DOWNLOAD_DIR="$DOWNLOAD_DIR"
else
    WINE_DOWNLOAD_DIR="/var/tmp/wine-pkgs/${WINE_VERSION}"
fi

if ! [ -d "${WINE_DOWNLOAD_DIR}" ];
then
    mkdir -p "${WINE_DOWNLOAD_DIR}"
fi


if ! [ -f "/etc/apt/keyrings/winehq-archive.key" ];
then
    prepare_apt

    if ! [ "$?" == "0" ];
    then
        abort "Could not prepare APT database."
    fi
fi


echo ""
echo "Updating APT database..."
echo "------------------------"

sudo apt update

if ! [ "$?" == "0" ];
then
    echo ""
    echo "APT database updating failed. You have not admin permissions but,"
    echo "if the database was updated previously, you may still"
    echo "be able to download Wine..."
    echo ""
fi


echo ""
echo "Downloading wine-${WINE_BRANCH} (${WINE_VERSION})..."
echo "-----------------------------------------------------"

cd $WINE_DOWNLOAD_DIR

# Allows fitting apt download commands in 80 colunns
BRANCH=$WINE_BRANCH
VERSION=$WINE_VERSION
DISTRO=$DISTRO_VERSION_NAME

if ! [ "$ARCH" == "both" ];
then
    apt download wine-${BRANCH}:${ARCH}=${VERSION}~${DISTRO}-1
    apt download wine-${BRANCH}-${ARCH}=${VERSION}~${DISTRO}-1

else
    apt download wine-${BRANCH}:i386=${VERSION}~${DISTRO}-1
    apt download wine-${BRANCH}-i386=${VERSION}~${DISTRO}-1
    apt download wine-${BRANCH}:amd64=${VERSION}~${DISTRO}-1
    apt download wine-${BRANCH}-amd64=${VERSION}~${DISTRO}-1
fi


if ! [ "$?" == "0" ];
then
    abort "Download failed."
fi


WINE_BRANCH_FILE="/var/tmp/wine-${WINE_VERSION}/.wine_branch"
WINE_VERSION_FILE="/var/tmp/wine-${WINE_VERSION}/.wine_version"
WINE_ARCH_FILE="/var/tmp/wine-${WINE_VERSION}/.wine_arch"

WINE32_DIR="wine-${WINE_VERSION}_i386"
WINE64_DIR="wine-${WINE_VERSION}_amd64"


echo "#!/bin/bash" > "$PWD/extract"

echo "" >> "$PWD/extract"

if [ "$ARCH" == "i386" ] || [ "$ARCH" == "both" ];
then
    echo "echo \"\"" >> "$PWD/extract"
    echo "echo \"Extracting Wine (i386) in /var/tmp/${WINE32_DIR} ...\"" \
        >> "$PWD/extract"

    echo "" >> "$PWD/extract"

    echo "for package in \$(ls *_i386.deb);" >> "$PWD/extract"
    echo "do" >> "$PWD/extract"
    echo "    dpkg-deb -x \$package /var/tmp/${WINE32_DIR}" \
        >> "$PWD/extract"
    echo "done" >> "$PWD/extract"

    echo "echo \"${BRANCH}\" > /var/tmp/${WINE32_DIR}/.wine_branch" \
          >> "$PWD/extract"
    
    echo "echo \"${WINE_VERSION}\" > /var/tmp/${WINE32_DIR}/.wine_version" \
          >> "$PWD/extract"

    echo "echo \"${ARCH}\" > /var/tmp/${WINE32_DIR}/.wine_arch" \
          >> "$PWD/extract"

    echo "echo \"\"">> "$PWD/extract"
    echo "echo \"Done.\"" >> "$PWD/extract"
fi

echo "" >> "$PWD/extract"

if [ "$ARCH" == "amd64" ] || [ "$ARCH" == "both" ];
then
    echo "echo \"\"" >> "$PWD/extract"
    echo "echo \"Extracting Wine (amd64) in /var/tmp/${WINE64_DIR} ...\"" \
        >> "$PWD/extract"

    echo "" >> "$PWD/extract"

    echo "for package in \$(ls *_amd64.deb);" >> "$PWD/extract"
    echo "do" >> "$PWD/extract"
    echo "    dpkg-deb -x \$package /var/tmp/${WINE64_DIR}" \
        >> "$PWD/extract"
    echo "done" >> "$PWD/extract"

    echo "echo \"${BRANCH}\" > /var/tmp/${WINE64_DIR}/.wine_branch" \
          >> "$PWD/extract"
    
    echo "echo \"${WINE_VERSION}\" > /var/tmp/${WINE64_DIR}/.wine_version" \
          >> "$PWD/extract"

    echo "echo \"${ARCH}\" > /var/tmp/${WINE64_DIR}/.wine_arch" \
          >> "$PWD/extract"

    echo "echo \"\"">> "$PWD/extract"
    echo "echo \"Done.\"" >> "$PWD/extract"
fi

echo "" >> "$PWD/extract"
 
echo "echo \"\"">> "$PWD/extract"
echo "echo \"Finished.\"" >> "$PWD/extract"
echo "echo \"\"" >> "$PWD/extract"

chmod +x "$PWD/extract"


echo "Downloaded in /var/tmp/wine-${WINE_VERSION}."
echo "Run /var/tmp/wine-${WINE_VERSION}/extract."
echo ""










