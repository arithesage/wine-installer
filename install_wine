#!/bin/bash

function abort
{
    REASON=$1

    if ! [ "$REASON" == "" ];
    then
        echo $REASON
    fi

    echo ""
    
    exit 1
}


function usage
{
    echo "Usage: install-wine <branch> <version> [i386|amd64|both] [inst dir]"
    echo ""
    echo "Branch is one of these: stable, devel or staging."
    echo ""
    echo "If no architecture is specified, host's one will be used."
    echo ""
    echo "Also, if host architecture is amd64, the packages for both"
    echo "architectures will be downloaded."
    echo ""
    echo "Packages will be installed by default in"
    echo "/opt/wine-{version}_{arch} but you can specify"
    echo "a custom path in 'inst dir'."
    echo ""
    echo "WARNING! You can install Wine without admin privileges, BUT,"
    echo "you need them for updating APT database and GPG key installing."
    echo ""
    echo "Also take in account that some versions may be not available in"
    echo "some branches. For example, at this moment, if you want to install"
    echo "Wine 9.0, you need to specify 'stable' branch, not devel or"
    echo "staging."
    echo ""
    echo -n "Check https://dl.winehq.org/wine-builds"
    echo "/{distro}/dists/{distro_version_name}/main/binary-{arch}/"
    echo "for the versions available."
    echo ""
}


if [ "$1" == "" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ];
then
    usage
    abort
fi




SCRIPT_DIR=$(realpath $(dirname $0))
WINE_SETUP_DIR=$SCRIPT_DIR


export PATH=$PATH:$SCRIPT_DIR:$SCRIPT_DIR/aux


WINE_BRANCH=$1
WINE_VERSION=$2
ARCH=$3
INSTALL_DIR=$4

DISTRO_VERSION_NAME=$(os_version_name)

WINESETUP_INSTALL_PATH="/opt/wine-setup"


if [ -f "$INSTALL_DIR/wine-${WINE_VERSION}_${ARCH}/opt/wine-${WINE_BRANCH}" ];
then
    abort "The requested Wine version is already installed."
fi


if ! [ -d "$WINESETUP_INSTALL_PATH" ];
then
    sudo mkdir -p "$WINESETUP_INSTALL_PATH"
fi

echo "$WINESETUP_INSTALL_PATH" > "$HOME/.wine-setup_path"


$SCRIPT_DIR/update


source "$SCRIPT_DIR/aux/check_site"
SCRIPT_DIR=$(realpath $(dirname $0))

if ! [ "$WINE_URL_OK" == "1" ];
then
    abort "Can't download Wine."
fi


if ! [ "$WINE_BRANCH" == "stable" ] && ! [ "$WINE_BRANCH" == "devel" ] && \
   ! [ "$WINE_BRANCH" == "staging" ];
then
    abort "Wrong branch name: '$WINE_BRANCH'."
fi


source "$SCRIPT_DIR/aux/packages_arch" --quiet
SCRIPT_DIR=$(realpath $(dirname $0))


if [ "$ARCH" == "" ];
then
    echo "No architecture provided."

    echo -n "The host architecture is "

    if [ "$PACKAGES_ARCH" == "amd64" ];
    then
        echo "amd64, so will install Wine for"
        echo "both architectures (i386 and amd64)."

        ARCH="both"
    else
        echo "i386, so will install Wine only for that architecture."
        
        ARCH="i386"
    fi
fi


if ! [ "$ARCH" == "i386" ] && ! [ "$ARCH" == "amd64" ] && \
   ! [ "$ARCH" == "both" ];
then
    echo "Invalid architecture value '${ARCH}'."
    abort "Only i386, amd64 or both are valid."
fi


if [[ $PACKAGES_ARCH == arm* ]] || [ "$PACKAGES_ARCH" == "amd64" ];
then
    if [ "$ARCH" == "i386" ] || [ "$ARCH" == "both" ];
    then
        sudo dpkg --add-architecture i386
        echo "Added i386 architecture to dpkg if wasn't available yet."
        echo ""
    fi

    if [ "$ARCH" == "amd64" ] || [ "$ARCH" == "both" ] && \
     ! [ "$PACKAGES_ARCH" == "amd64" ];
    then
        sudo dpkg --add-architecture amd64
        echo "Added amd64 architecture to dpkg if wasn't available yet."
        echo ""
    fi
fi


if [ "$WINE_VERSION" == "" ];
then
    echo "You must specify a version to download."
    abort "Check available ones in ${DEBIAN_BUILDS_URL}/main/binary-${ARCH}."
fi



source "$SCRIPT_DIR/aux/get_wine_urls" $WINE_BRANCH $DISTRO_VERSION_NAME --quiet
SCRIPT_DIR=$(realpath $(dirname $0))


WINE_DOWNLOAD_DIR="/var/tmp/wine-pkgs/${WINE_VERSION}"



if ! [ -d "${WINE_DOWNLOAD_DIR}" ];
then
    mkdir -p "${WINE_DOWNLOAD_DIR}"
fi


if ! [ -f "/etc/apt/keyrings/winehq-archive.key" ];
then
    prepare_apt

    if ! [ "$?" == "0" ];
    then
        abort "Could not prepare APT database."
    fi
fi


echo ""
echo "Updating APT database..."
echo "------------------------"

sudo apt update

if ! [ "$?" == "0" ];
then
    echo ""
    echo "APT database updating failed. You have not admin permissions but,"
    echo "if the database was updated previously, you may still"
    echo "be able to download Wine..."
    echo ""
fi


echo ""
echo "Downloading wine-${WINE_BRANCH} (${WINE_VERSION})..."
echo "-----------------------------------------------------"

cd $WINE_DOWNLOAD_DIR

# Allows fitting apt download commands in 80 colunns
BRANCH=$WINE_BRANCH
VERSION=$WINE_VERSION
DISTRO=$DISTRO_VERSION_NAME

CONTROL="wine-${BRANCH}-${ARCH}_${VERSION}~"
CONTROL+="${DISTRO_VERSION_NAME}-1_${ARCH}.deb"

if [ -f "$CONTROL" ];
then
    echo "Already downloaded. Skipping."
else
    if ! [ "$ARCH" == "both" ];
    then
        apt download wine-${BRANCH}:${ARCH}=${VERSION}~${DISTRO}-1
        apt download wine-${BRANCH}-${ARCH}=${VERSION}~${DISTRO}-1

    else
        apt download wine-${BRANCH}:i386=${VERSION}~${DISTRO}-1
        apt download wine-${BRANCH}-i386=${VERSION}~${DISTRO}-1
        apt download wine-${BRANCH}:amd64=${VERSION}~${DISTRO}-1
        apt download wine-${BRANCH}-amd64=${VERSION}~${DISTRO}-1
    fi
fi


if ! [ "$?" == "0" ];
then
    abort "Download failed."
fi


WINE32_DIR="wine-${WINE_VERSION}_i386"
WINE64_DIR="wine-${WINE_VERSION}_amd64"


echo ""
echo "Installing ..."
echo "--------------"

if [ "$INSTALL_DIR" == "" ];
then
    INSTALL_DIR="/opt"
fi

if ! [ -d "$INSTALL_DIR" ];
then
    sudo mkdir -p "$INSTALL_DIR"
fi

if ! [ "$?" == "0" ];
then
    abort "Cannot create dir '$INSTALL_DIR'. Check your permissions there."
fi


cd "$WINE_DOWNLOAD_DIR"


if [ "$ARCH" == "i386" ] || [ "$ARCH" == "both" ];
then
    for package in $(ls *_i386.deb);
    do
        dpkg-deb -x $package $WINE32_DIR

        if ! [ "$?" == "0" ];
        then
            abort "Failed extracting '$package' in '$WINE_32_DIR'."
        fi
    done

    echo "$BRANCH" > "$WINE32_DIR/.wine_branch"
    echo "$WINE_VERSION" > "$WINE32_DIR/.wine_version"
    echo "i386" > "$WINE32_DIR/.wine_arch"

    sudo mv $WINE32_DIR "$INSTALL_DIR/"

    echo "Wine (32 bit) installed in /opt/wine-${WINE_VERSION}_i386."
fi


if [ "$ARCH" == "amd64" ] || [ "$ARCH" == "both" ];
then
    for package in $(ls *_amd64.deb);
    do
        dpkg-deb -x $package $WINE64_DIR

        if ! [ "$?" == "0" ];
        then
            abort "Failed extracting '$package' in '$WINE_64_DIR'."
        fi
    done

    echo "$BRANCH" > "$WINE64_DIR/.wine_branch"
    echo "$WINE_VERSION" > "$WINE64_DIR/.wine_version"
    echo "amd64" > "$WINE64_DIR/.wine_arch"

    sudo mv $WINE64_DIR "$INSTALL_DIR/"

    echo "Wine (64 bit) installed in /opt/wine-${WINE_VERSION}_amd64."
fi


cd "$WINE_SETUP_DIR"


if ! [ -f "$HOME/.default_win32_env" ] && \
     [ "$ARCH" == "i386" ] || [ "$ARCH" == "both" ];
then
    echo "Creating the default environment for Windows (32 bit)..."
    echo "--------------------------------------------------------"

    source "$SCRIPT_DIR/use_wine" "$INSTALL_DIR/$WINE32_DIR"
    SCRIPT_DIR=$(realpath $(dirname $0))

    win_prepare ".wine" win32

    if ! [ "$?" == "0" ];
    then
        echo "Failed!"
    else
        echo "$INSTALL_DIR/$WINE32_DIR" > "$HOME/.default_win32_env"
    fi        
fi


if ! [ -f "$HOME/.default_win64_env" ] && \
     [ "$ARCH" == "amd64" ] || [ "$ARCH" == "both" ];
then
    echo "Creating the default environment for Windows (64 bit)..."
    echo "--------------------------------------------------------"

    source "$SCRIPT_DIR/use_wine" "$INSTALL_DIR/$WINE64_DIR"
    SCRIPT_DIR=$(realpath $(dirname $0))
    
    win_prepare ".wine64" win64

    if ! [ "$?" == "0" ];
    then
        echo "Failed!"
    else
        echo "$INSTALL_DIR/$WINE64_DIR" > "$HOME/.default_win64_env"
    fi
fi


echo ""
echo "Installing winetricks ..."
echo "-------------------------"

# Zenity is needed for showing winetricks GUI.
# Vulkan Tools aren't needed, but they can be useful to check if you have
# Vulkan support.
sudo apt install -y zenity vulkan-tools


cd /var/tmp
wget https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks
sudo mv /var/tmp/winetricks "$WINESETUP_INSTALL_PATH/winetricks"

sudo ln -s "$WINESETUP_INSTALL_PATH/winetricks" "/usr/local/bin/winetricks"


echo ""
echo "All donde."
echo ""










