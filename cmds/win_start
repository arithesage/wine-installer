#!/bin/bash

abort()
{
    MESSAGE=$1

    if ! [ "$MESSAGE" == "" ];
    then
        echo "$MESSAGE"
        echo ""
    fi

    exit 1
}


check_exec_arch()
{
    EXEC_FILE=$1

    echo "Checking if file '$EXEC_FILE' is a Windows executable..."

    FILE_TYPE=$(exec_type "$EXEC_FILE")

    if [ "$FILE_TYPE" == "windows-i386" ];
    then
        export WINE32_NEEDED=1

        echo "Want to launch a Windows 32 bit executable."
        echo ""

    elif [ "$FILE_TYPE" == "windows-amd64" ];
    then
        export WINE64_NEEDED=1

        echo "Want to launch a Windows 64 bit executable."
        echo ""

    else
        abort "The given file isn't a Windows 32 or 64 bit executable."
    fi
}


usage()
{
    echo "Usage: start <executable>"
    echo ""
}




if [ "$1" == "" ] || [ "$1" == "-h" ] || [ "$1" == "--help" ];
then
    usage
    abort
fi


if ! [ -f "$HOME/.wine-env_path" ] || ! [ -f "$HOME/.wine_env" ];
then
    abort "No ~/.wine-env_path or ~/.wine_env files found. Run setup first."
fi


if [ "$WINE_ENV_PATH" == "" ];
then
    source "$HOME/.wine_env"
fi


if ! [ -f "$HOME/.default_win32_env" ] &&
   ! [ -f "$HOME/.default_win64_env" ];
then
    echo "Default envs for Win32 and Win64 are missing."
    abort "No Wine installation available?"
fi


EXEC_PATH=$(realpath "$1")
ARGS="${@:2}"

EXEC_DIR=$(dirname "$EXEC_PATH")
EXEC_BASENAME=$(basename "$EXEC_PATH" .exe)


if [ "$WINE32_NEEDED" == "0" ] && [ "$WINE64_NEEDED" == "" ];
then
    abort "Not a Windows executable."
fi


APP_WINENV=$EXEC_DIR/.winenv
EXEC_WINENV=$EXEC_DIR/$EXEC_BASENAME.winenv


if ! [ -f "$EXEC_WINENV" ];
then
    echo "No Wine environment associated with the executable was found."

else
    # If the executable has a Wine environment associated, load it
    source "$EXEC_WINENV"

    EXEC_WINENV_LOADED=1
    echo "Loaded Wine environment '$EXEC_WINENV'."
fi


if ! [ -f "$APP_WINENV" ];
then
    # If no Wine environment was loaded for the executable, check if
    # the executable folder contains one and load it
    echo "No Wine environment associated with this app was found."

else
    source "$APP_WINENV"

    APP_WINENV_LOADED=1
    echo "Loaded Wine environment '$APP_WINENV'."
fi


if [ "$WINELOADER" == "" ];
then
    # If no Wine environment has been loaded at this moment,
    # try with the default one for the executable architecture

    check_exec_arch "$EXEC_PATH"

    if [ "$WINE32_NEEDED" == "1" ];
    then
        if ! [ -f "$HOME/.default_win32_env" ];
        then
            abort "Cannot find ~/.default_win32_env. Install a win32 prefix."
        fi

        source wine_load $(cat "$HOME/.default_win32_env")

    elif [ "$WINE64_NEEDED" == "1" ];
    then
        if ! [ -f "$HOME/.default_win64_env" ];
        then
            abort "Cannot find ~/.default_win64_env. Install a win64 prefix."
        fi

        source wine_load $(cat "$HOME/.default_win64_env")
    fi

    if [ "$WINELOADER" == "" ];
    then
        echo -n "Failed loading the default Wine environment "
        echo "for the needed architecture."

        abort "Install the needed prefix and set it the default one."
    fi
fi


if [ "$WINEPREFIX" == "" ];
then
    # If no Wine prefix has been loaded at this moment, activate
    # the default for the needed architecture

    if [ "$WINE32_NEEDED" == "1" ] && [ -d "$HOME/.wine" ];
    then
        source ~/.wine/activate

    elif [ "$WINE64_NEEDED" == "1" ] && [ -d "$HOME/wine64" ];
    then
        source ~/.wine64/activate
    fi

    if [ "$WINEPREFIX" == "" ];
    then
        abort "Failed to load the needed Wine prefix."
    fi
fi


if ! [ "$WINELOADER" == "" ] && ! [ "$WINEPREFIX" == "" ];
then
    echo -n "Launching '$EXEC_PATH'"

    if ! [ "$ARGS" == "" ];
    then
        echo " with args '$ARGS'..."
    fi

    echo ""

    wine "$EXEC_PATH" $ARGS
fi

